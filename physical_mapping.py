import math
from PIL import Image 
import PIL
import pygame
import time
DARK_GRAY = [25, 25, 25]
RED = [255, 0, 0]
YELLOW = [255, 150, 0]
ORANGE = [255, 40, 0]
GREEN = [0, 255, 0]
TEAL = [0, 255, 120]
CYAN = [0, 255, 255]
BLUE = [0, 0, 255]
PURPLE = [180, 0, 255]
MAGENTA = [255, 0, 20]
WHITE = [255, 255, 255]
BLANK = [0, 0, 0]
SIZE = (width, height) = (1100, 1200)

# Generated from getMapping()
pixel_map = {57: {104: 149, 138: 116, 141: 117, 101: 148}, 58: {144: 118, 98: 147, 106: 150, 135: 115}, 59: {146: 119, 133: 114, 95: 146}, 60: {130: 113, 93: 145, 109: 151}, 61: {148: 120, 111: 152}, 62: {128: 112, 91: 144}, 63: {150: 121}, 64: {89: 143, 113: 153, 127: 111}, 66: {152: 122, 114: 154}, 67: {88: 142, 125: 110}, 68: {152: 123}, 69: {115: 124, 87: 141}, 70: {125: 109}, 71: {153: 93}, 72: {115: 125, 87: 140}, 73: {125: 108}, 74: {152: 94, 115: 126}, 75: {88: 139, 125: 107}, 77: {152: 95, 114: 127}, 78: {89: 138, 127: 106}, 79: {150: 96}, 80: {128: 105, 113: 128, 90: 137}, 81: {148: 97}, 82: {130: 104, 92: 136, 111: 129}, 83: {146: 98, 108: 130}, 84: {144: 99, 133: 103, 95: 135}, 85: {97: 134, 100: 133, 103: 132, 138: 101, 135: 102, 141: 100, 106: 131}, 90: {193: 54, 196: 55, 43: 209, 46: 210, 80: 177, 49: 211, 83: 178, 86: 179, 153: 85, 156: 86, 190: 53, 159: 87}, 91: {161: 88, 199: 56, 40: 208, 78: 176, 51: 212, 150: 84, 89: 180, 188: 52}, 92: {164: 89, 38: 207, 201: 57, 148: 83, 54: 213, 91: 181}, 93: {185: 51, 75: 175}, 94: {36: 206, 166: 90, 203: 58, 146: 82, 56: 214, 93: 182}, 95: {73: 174, 183: 50}, 96: {168: 91, 58: 215, 205: 59, 95: 183}, 97: {144: 81, 72: 173, 34: 205, 182: 49}, 98: {97: 184, 207: 60}, 99: {169: 92, 59: 216, 33: 204, 143: 80}, 100: {180: 48, 70: 172}, 101: {97: 185, 170: 62, 60: 186, 207: 61}, 102: {32: 203, 180: 47, 70: 171, 142: 79}, 104: {208: 31, 170: 63, 60: 187, 98: 155}, 105: {32: 202, 180: 46, 70: 170, 142: 78}, 107: {97: 156, 170: 64, 60: 188, 207: 32}, 108: {33: 201, 180: 45, 70: 169, 143: 77}, 109: {97: 157, 207: 33}, 110: {144: 76, 169: 65, 34: 200, 59: 189}, 111: {72: 168, 182: 44}, 112: {168: 66, 58: 190, 205: 34, 95: 158}, 113: {145: 75, 35: 199, 73: 167, 183: 43}, 114: {56: 191, 203: 35, 93: 159, 166: 67}, 115: {185: 42, 75: 166, 147: 74, 37: 198}, 116: {163: 68, 40: 197, 201: 36, 78: 165, 53: 192, 150: 73, 91: 160, 188: 41}, 117: {161: 69, 199: 37, 42: 196, 80: 164, 51: 193, 152: 72, 89: 161, 190: 40}, 118: {193: 39, 196: 38, 45: 195, 48: 194, 83: 163, 86: 162, 155: 71, 158: 70}, 122: {101: 334, 104: 335, 138: 364, 141: 365, 211: 24, 214: 25, 28: 240, 31: 241}, 123: {144: 366, 34: 242, 135: 363, 106: 336, 98: 333, 208: 23, 216: 26, 25: 239}, 124: {36: 243, 133: 362, 205: 22, 146: 367, 23: 238, 95: 332}, 125: {130: 361, 203: 21, 109: 337, 20: 237, 219: 27, 93: 331}, 126: {148: 368, 221: 28, 38: 244, 111: 338}, 127: {128: 360, 201: 20, 18: 236, 91: 330}, 128: {40: 245, 150: 369}, 129: {199: 19, 16: 235, 113: 339, 89: 329, 127: 359, 223: 29}, 131: {224: 30, 152: 370, 42: 246, 114: 340}, 132: {88: 328, 125: 358, 198: 18, 15: 234}, 133: {152: 371, 42: 247}, 134: {225: 0, 115: 310, 197: 17, 87: 327}, 135: {125: 357, 15: 233}, 136: {153: 341, 43: 217}, 137: {225: 1, 115: 311, 197: 16, 87: 326}, 138: {125: 356, 15: 232}, 139: {152: 342, 225: 2, 42: 218, 115: 312}, 140: {88: 325, 125: 355, 198: 15, 15: 231}, 142: {224: 3, 152: 343, 42: 219, 114: 313}, 143: {16: 230, 89: 324, 127: 354, 199: 14}, 144: {40: 220, 150: 344}, 145: {128: 353, 200: 13, 113: 314, 18: 229, 90: 323, 223: 4}, 146: {148: 345, 38: 221}, 147: {130: 352, 202: 12, 111: 315, 20: 228, 92: 322, 221: 5}, 148: {108: 316, 218: 6, 36: 222, 146: 346}, 149: {34: 223, 133: 351, 205: 11, 144: 347, 23: 227, 95: 321}, 150: {97: 320, 100: 319, 103: 318, 106: 317, 135: 350, 141: 348, 207: 10, 210: 9, 213: 8, 216: 7, 25: 226, 28: 225, 138: 349, 31: 224}, 155: {193: 426, 196: 427, 43: 271, 46: 272, 80: 301, 49: 273, 83: 302, 86: 303, 153: 395, 156: 396, 190: 425, 159: 397}, 156: {161: 398, 199: 428, 40: 270, 78: 300, 51: 274, 150: 394, 89: 304, 188: 424}, 157: {164: 399, 38: 269, 201: 429, 148: 393, 54: 275, 91: 305}, 158: {185: 423, 75: 299}, 159: {36: 268, 166: 400, 203: 430, 146: 392, 56: 276, 93: 306}, 160: {73: 298, 183: 422}, 161: {168: 401, 58: 277, 205: 431, 95: 307}, 162: {72: 297, 144: 391, 34: 267, 182: 421}, 163: {97: 308, 207: 432}, 164: {33: 266, 59: 278, 169: 402, 143: 390}, 165: {180: 420, 70: 296}, 166: {97: 309, 170: 372, 60: 248, 207: 433}, 167: {32: 265, 180: 419, 142: 389, 70: 295}, 169: {208: 403, 98: 279, 60: 249, 170: 373}, 170: {32: 264, 180: 418, 142: 388, 70: 294}, 172: {97: 280, 170: 374, 60: 250, 207: 404}, 173: {33: 263, 180: 417, 70: 293, 143: 387}, 174: {97: 281, 207: 405}, 175: {144: 386, 169: 375, 34: 262, 59: 251}, 176: {72: 292, 182: 416}, 177: {168: 376, 58: 252, 205: 406, 95: 282}, 178: {73: 291, 35: 261, 183: 415, 145: 385}, 179: {56: 253, 203: 407, 93: 283, 166: 377}, 180: {185: 414, 75: 290, 147: 384, 37: 260}, 181: {163: 378, 40: 259, 201: 408, 78: 289, 53: 254, 150: 383, 91: 284, 188: 413}, 182: {161: 379, 199: 409, 42: 258, 80: 288, 51: 255, 152: 382, 89: 285, 190: 412}, 183: {193: 411, 196: 410, 45: 257, 48: 256, 83: 287, 86: 286, 155: 381, 158: 380}}
pmap = {0: [134, 225], 1: [137, 225], 2: [139, 225], 3: [142, 224], 4: [145, 223], 5: [147, 221], 6: [148, 218], 7: [150, 216], 8: [150, 213], 9: [150, 210], 10: [150, 207], 11: [149, 205], 12: [147, 202], 13: [145, 200], 14: [143, 199], 15: [140, 198], 16: [137, 197], 17: [134, 197], 18: [132, 198], 19: [129, 199], 20: [127, 201], 21: [125, 203], 22: [124, 205], 23: [123, 208], 24: [122, 211], 25: [122, 214], 26: [123, 216], 27: [125, 219], 28: [126, 221], 29: [129, 223], 30: [131, 224], 31: [104, 208], 32: [107, 207], 33: [109, 207], 34: [112, 205], 35: [114, 203], 36: [116, 201], 37: [117, 199], 38: [118, 196], 39: [118, 193], 40: [117, 190], 41: [116, 188], 42: [115, 185], 43: [113, 183], 44: [111, 182], 45: [108, 180], 46: [105, 180], 47: [102, 180], 48: [100, 180], 49: [97, 182], 50: [95, 183], 51: [93, 185], 52: [91, 188], 53: [90, 190], 54: [90, 193], 55: [90, 196], 56: [91, 199], 57: [92, 201], 58: [94, 203], 59: [96, 205], 60: [98, 207], 61: [101, 207], 62: [101, 170], 63: [104, 170], 64: [107, 170], 65: [110, 169], 66: [112, 168], 67: [114, 166], 68: [116, 163], 69: [117, 161], 70: [118, 158], 71: [118, 155], 72: [117, 152], 73: [116, 150], 74: [115, 147], 75: [113, 145], 76: [110, 144], 77: [108, 143], 78: [105, 142], 79: [102, 142], 80: [99, 143], 81: [97, 144], 82: [94, 146], 83: [92, 148], 84: [91, 150], 85: [90, 153], 86: [90, 156], 87: [90, 159], 88: [91, 161], 89: [92, 164], 90: [94, 166], 91: [96, 168], 92: [99, 169], 93: [71, 153], 94: [74, 152], 95: [77, 152], 96: [79, 150], 97: [81, 148], 98: [83, 146], 99: [84, 144], 100: [85, 141], 101: [85, 138], 102: [85, 135], 103: [84, 133], 104: [82, 130], 105: [80, 128], 106: [78, 127], 107: [75, 125], 108: [73, 125], 109: [70, 125], 110: [67, 125], 111: [64, 127], 112: [62, 128], 113: [60, 130], 114: [59, 133], 115: [58, 135], 116: [57, 138], 117: [57, 141], 118: [58, 144], 119: [59, 146], 120: [61, 148], 121: [63, 150], 122: [66, 152], 123: [68, 152], 124: [69, 115], 125: [72, 115], 126: [74, 115], 127: [77, 114], 128: [80, 113], 129: [82, 111], 130: [83, 108], 131: [85, 106], 132: [85, 103], 133: [85, 100], 134: [85, 97], 135: [84, 95], 136: [82, 92], 137: [80, 90], 138: [78, 89], 139: [75, 88], 140: [72, 87], 141: [69, 87], 142: [67, 88], 143: [64, 89], 144: [62, 91], 145: [60, 93], 146: [59, 95], 147: [58, 98], 148: [57, 101], 149: [57, 104], 150: [58, 106], 151: [60, 109], 152: [61, 111], 153: [64, 113], 154: [66, 114], 155: [104, 98], 156: [107, 97], 157: [109, 97], 158: [112, 95], 159: [114, 93], 160: [116, 91], 161: [117, 89], 162: [118, 86], 163: [118, 83], 164: [117, 80], 165: [116, 78], 166: [115, 75], 167: [113, 73], 168: [111, 72], 169: [108, 70], 170: [105, 70], 171: [102, 70], 172: [100, 70], 173: [97, 72], 174: [95, 73], 175: [93, 75], 176: [91, 78], 177: [90, 80], 178: [90, 83], 179: [90, 86], 180: [91, 89], 181: [92, 91], 182: [94, 93], 183: [96, 95], 184: [98, 97], 185: [101, 97], 186: [101, 60], 187: [104, 60], 188: [107, 60], 189: [110, 59], 190: [112, 58], 191: [114, 56], 192: [116, 53], 193: [117, 51], 194: [118, 48], 195: [118, 45], 196: [117, 42], 197: [116, 40], 198: [115, 37], 199: [113, 35], 200: [110, 34], 201: [108, 33], 202: [105, 32], 203: [102, 32], 204: [99, 33], 205: [97, 34], 206: [94, 36], 207: [92, 38], 208: [91, 40], 209: [90, 43], 210: [90, 46], 211: [90, 49], 212: [91, 51], 213: [92, 54], 214: [94, 56], 215: [96, 58], 216: [99, 59], 217: [136, 43], 218: [139, 42], 219: [142, 42], 220: [144, 40], 221: [146, 38], 222: [148, 36], 223: [149, 34], 224: [150, 31], 225: [150, 28], 226: [150, 25], 227: [149, 23], 228: [147, 20], 229: [145, 18], 230: [143, 16], 231: [140, 15], 232: [138, 15], 233: [135, 15], 234: [132, 15], 235: [129, 16], 236: [127, 18], 237: [125, 20], 238: [124, 23], 239: [123, 25], 240: [122, 28], 241: [122, 31], 242: [123, 34], 243: [124, 36], 244: [126, 38], 245: [128, 40], 246: [131, 42], 247: [133, 42], 248: [166, 60], 249: [169, 60], 250: [172, 60], 251: [175, 59], 252: [177, 58], 253: [179, 56], 254: [181, 53], 255: [182, 51], 256: [183, 48], 257: [183, 45], 258: [182, 42], 259: [181, 40], 260: [180, 37], 261: [178, 35], 262: [175, 34], 263: [173, 33], 264: [170, 32], 265: [167, 32], 266: [164, 33], 267: [162, 34], 268: [159, 36], 269: [157, 38], 270: [156, 40], 271: [155, 43], 272: [155, 46], 273: [155, 49], 274: [156, 51], 275: [157, 54], 276: [159, 56], 277: [161, 58], 278: [164, 59], 279: [169, 98], 280: [172, 97], 281: [174, 97], 282: [177, 95], 283: [179, 93], 284: [181, 91], 285: [182, 89], 286: [183, 86], 287: [183, 83], 288: [182, 80], 289: [181, 78], 290: [180, 75], 291: [178, 73], 292: [176, 72], 293: [173, 70], 294: [170, 70], 295: [167, 70], 296: [165, 70], 297: [162, 72], 298: [160, 73], 299: [158, 75], 300: [156, 78], 301: [155, 80], 302: [155, 83], 303: [155, 86], 304: [156, 89], 305: [157, 91], 306: [159, 93], 307: [161, 95], 308: [163, 97], 309: [166, 97], 310: [134, 115], 311: [137, 115], 312: [139, 115], 313: [142, 114], 314: [145, 113], 315: [147, 111], 316: [148, 108], 317: [150, 106], 318: [150, 103], 319: [150, 100], 320: [150, 97], 321: [149, 95], 322: [147, 92], 323: [145, 90], 324: [143, 89], 325: [140, 88], 326: [137, 87], 327: [134, 87], 328: [132, 88], 329: [129, 89], 330: [127, 91], 331: [125, 93], 332: [124, 95], 333: [123, 98], 334: [122, 101], 335: [122, 104], 336: [123, 106], 337: [125, 109], 338: [126, 111], 339: [129, 113], 340: [131, 114], 341: [136, 153], 342: [139, 152], 343: [142, 152], 344: [144, 150], 345: [146, 148], 346: [148, 146], 347: [149, 144], 348: [150, 141], 349: [150, 138], 350: [150, 135], 351: [149, 133], 352: [147, 130], 353: [145, 128], 354: [143, 127], 355: [140, 125], 356: [138, 125], 357: [135, 125], 358: [132, 125], 359: [129, 127], 360: [127, 128], 361: [125, 130], 362: [124, 133], 363: [123, 135], 364: [122, 138], 365: [122, 141], 366: [123, 144], 367: [124, 146], 368: [126, 148], 369: [128, 150], 370: [131, 152], 371: [133, 152], 372: [166, 170], 373: [169, 170], 374: [172, 170], 375: [175, 169], 376: [177, 168], 377: [179, 166], 378: [181, 163], 379: [182, 161], 380: [183, 158], 381: [183, 155], 382: [182, 152], 383: [181, 150], 384: [180, 147], 385: [178, 145], 386: [175, 144], 387: [173, 143], 388: [170, 142], 389: [167, 142], 390: [164, 143], 391: [162, 144], 392: [159, 146], 393: [157, 148], 394: [156, 150], 395: [155, 153], 396: [155, 156], 397: [155, 159], 398: [156, 161], 399: [157, 164], 400: [159, 166], 401: [161, 168], 402: [164, 169], 403: [169, 208], 404: [172, 207], 405: [174, 207], 406: [177, 205], 407: [179, 203], 408: [181, 201], 409: [182, 199], 410: [183, 196], 411: [183, 193], 412: [182, 190], 413: [181, 188], 414: [180, 185], 415: [178, 183], 416: [176, 182], 417: [173, 180], 418: [170, 180], 419: [167, 180], 420: [165, 180], 421: [162, 182], 422: [160, 183], 423: [158, 185], 424: [156, 188], 425: [155, 190], 426: [155, 193], 427: [155, 196], 428: [156, 199], 429: [157, 201], 430: [159, 203], 431: [161, 205], 432: [163, 207], 433: [166, 207]}

def isGray(color):
    return (color[0] > color[1]-10 and color[0] < color[1]+10 and color[1] > color[2] - 10 and color[1] < color[2]+10)

def closest(color):
    choices = [RED, ORANGE, BLUE, YELLOW]
    d = 500
    selection = BLANK 
    if isGray(color):
        return BLANK
    for i in range(0, len(choices)):
        n = math.sqrt((color[0]-choices[i][0])**2 + (color[1]-choices[i][1])**2 + (color[2]-choices[i][2])**2)
        if n < d:
            d = n
            selection = choices[i]
    return selection

def convertGifToAnimation():
    im = Image.open("rotatingcube.gif")
    print(im.n_frames)
    animation = []
    for z in range(im.n_frames):
        strip = [BLANK] * 434
        im.seek(z)
        rgb_im = im.convert('RGB')
        rgb_im = rgb_im.resize((240,240), PIL.Image.LANCZOS)
        for x in pixel_map:
            for y in pixel_map[x]:
                p = pixel_map[x][y]
                color = closest(rgb_im.getpixel((x, y)))
                strip[p] = color
        animation.append(strip)
    return animation

def drawImage():
    im = Image.open("cube.png") 
    px = im.load() 
    for x in pixel_map:
        for y in pixel_map[x]:
            color = px[x,y]
            drawCircle((x,y), px[x,y])
    pygame.display.update()

def drawAnimation(animation):
    for s in range(0,len(animation)):
        for p in range(0, 434):
            drawCircle(pmap[p], animation[s][p])
        pygame.display.update()
        time.sleep(0.1)

def drawCircle(position, color):
    pygame.draw.circle(screen, color, position, 1)

def main():
    global screen, height, width
    pygame.init()
    pygame.display.set_caption("CTA")
    
    screen = pygame.display.set_mode(SIZE)    

    for x in range(1,149):
        pygame.draw.line(screen, DARK_GRAY, (0, (x*10)+5), (1499, (x*10)+5))
        pygame.draw.line(screen, DARK_GRAY, ((x*10)+5, 0), ((x*10)+5, 1499))

    running = True
    anim = convertGifToAnimation()
    print(anim)
    while running:
        drawAnimation(anim)
        # event handling, gets all event from the event queue
        for event in pygame.event.get():
            if event.type == pygame.MOUSEBUTTONUP:
                pygame.display.update()
            if event.type == pygame.QUIT:
                running = False
     

def getMapping():
    pixel_map = {}
    pmap = {}

    #Center of LED circles in inches from the bottom left of the board.
    centers = {
        0: [13.625, 2.874],
        1: [10.375, 4.624],
        2: [10.375, 8.375],
        3: [7.125, 10.125],
        4: [7.125, 13.876],
        5: [10.375, 15.625],
        6: [10.375, 19.376],
        7: [13.625, 21.126],
        8: [16.875, 19.376],
        9: [16.875, 15.625],
        10: [13.625, 13.876],
        11: [13.625, 10.125],
        12: [16.875, 8.375],
        13: [16.875, 4.624]
    }

    # Radius in inches
    radius = 1.4

    for c in centers:
        for i in range(0, 31):
            offset = 0 
            if c % 2 == 0:
                offset = -(1.0/18) * math.pi
            xpos = int(10 * round(centers[c][0] + radius * math.sin((2*i*math.pi/31)+offset), 1))
            ypos = int(10 * round(24.0 - centers[c][1] + radius * math.cos((2*i*math.pi/31)+offset), 1))
            pmap[c*31+i] = [xpos, ypos]
            print(c*31+i, round(xpos,3), round(ypos,3))
            try:
                pixel_map[xpos][ypos] = c*31+i
            except KeyError:
                pixel_map[xpos] = {ypos: c*31+i}
    print(pixel_map)
    print(pmap)
#getMapping()

if __name__=="__main__":
    main()


